on:
  watch:
    types: started
jobs:
  prepare_release:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
    - name: Get release tag
      id: release_tag
      run: |
        release_tag="FriendlyWrt-$(date +%Y-%m-%d)"
        echo "##[set-output name=release_tag;]$release_tag"

    - name: Create empty release
      id: release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_tag.outputs.release_tag }}
        draft: false
        prerelease: false
    outputs:
      release_tag: ${{ steps.release_tag.outputs.release_tag }}
      upload_url: ${{ steps.release.outputs.upload_url }}

  build_friendlywrt:
    needs: prepare_release
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        VERSION: [21.02, 22.03]
        SET: [docker, non-docker]
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d
        wget https://raw.githubusercontent.com/friendlyarm/build-env-on-ubuntu-bionic/master/install.sh
        sed -i -e 's/^apt-get -y install openjdk-8-jdk/# apt-get -y install openjdk-8-jdk/g' install.sh
        sed -i -e 's/^\[ -d fa-toolchain \]/# [ -d fa-toolchain ]/g' install.sh
        sed -i -e 's/^cat fa-toolchain/# cat fa-toolchain/g' install.sh
        sudo -E bash ./install.sh
        sudo -E update-alternatives --install $(which python) python /usr/bin/python2.7 20
        sudo -E git config --global user.name 'GitHub Actions'
        sudo -E git config --global user.email 'noreply@github.com'
        git clone https://github.com/friendlyarm/repo
        sudo -E cp repo/repo /usr/bin/
        mkdir -p ./artifact
        sudo swapoff -a
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /usr/local/share/boost /opt/ghc

    - name: Download source
      run: |
        mkdir project
        cd project
        repo init --depth=1 -u https://github.com/friendlyarm/friendlywrt_manifests -b master-v${{ matrix.VERSION }} \
                -m rk3399.xml --repo-url=https://github.com/friendlyarm/repo  --no-clone-bundle

        repo sync -c friendlywrt --no-clone-bundle
        repo sync -c configs --no-clone-bundle
        repo sync -c device/common --no-clone-bundle
        repo sync -c device/friendlyelec --no-clone-bundle
        repo sync -c scripts --no-clone-bundle
        repo sync -c scripts/sd-fuse  --no-clone-bundle

    - name: Apply customizations
      run: |
        cd project
        source ../scripts/add_packages.sh
        source ../scripts/custome_config.sh

    - name: Prepare dot config and feeds
      run: |
        cd project
        DIRNAME=friendlywrt21
        if [ "${{ matrix.VERSION }}" == "22.03" ]; then
          DIRNAME=friendlywrt22
        fi
        CONFIG=rockchip
        if [ "${{ matrix.SET }}" == "docker" ]; then
          CONFIG=rockchip-docker
          DIRNAME=${DIRNAME}-docker
        fi
        cat > .current_config.mk <<EOL
        . device/friendlyelec/rk3399/base.mk
        TARGET_IMAGE_DIRNAME=${DIRNAME}
        TARGET_FRIENDLYWRT_CONFIG=${CONFIG}
        EOL
        (cd scripts && {
          sed -i 's/^\s*install_toolchain/# install_toolchain/g' ./build.sh
        })
        DEBUG_DOT_CONFIG=1 ./build.sh friendlywrt

    - name: Enable cache
      uses: HiGarfield/cachewrtbuild@main
      with:
        mixkey: ${{ matrix.VERSION }}-${{ matrix.SET }}
        prefix: ${{ github.workspace }}/project/friendlywrt

    - name: Download package
      run: |
        cd project/friendlywrt
        # make download -j8
        # find dl -size -1024c -exec ls -l {} \;
        # find dl -size -1024c -exec rm -f {} \;

    - name: Compile friendlyWrt
      id: compile
      continue-on-error: true
      run: |
        # cd project/friendlywrt
        # make -j$[`nproc` + 1] || make -j1 V=s
        echo $?

    - name: Check the result and try again
      if: steps.compile.outcome == 'failure'
      run: |
        cd project/friendlywrt
        # make -j1 V=s

    - name: Create rootfs package
      id: create_rootfs_package
      run: |
        cd project
        source .current_config.mk
        mkdir -p ${FRIENDLYWRT_SRC}/${FRIENDLYWRT_ROOTFS}  #todo
        rootfs_filename="rootfs-friendlywrt-${{ matrix.VERSION }}.tgz"
        if [ "${{ matrix.SET }}" == "docker" ]; then
          rootfs_filename="rootfs-friendlywrt-${{ matrix.VERSION }}-docker.tgz"
        fi
        tar cvzf ../artifact/${rootfs_filename} ${FRIENDLYWRT_SRC}/${FRIENDLYWRT_ROOTFS}
        echo "##[set-output name=rootfs_filename;]$rootfs_filename"

    - name: Upload rootfs package
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.prepare_release.outputs.upload_url }}
        asset_path: ./artifact/${{ steps.create_rootfs_package.outputs.rootfs_filename }}
        asset_name: ${{ steps.create_rootfs_package.outputs.rootfs_filename }}
        asset_content_type: application/gzip

  build_img:
    needs: [prepare_release,build_friendlywrt]
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    strategy:
      matrix:
        VERSION: [21.02, 22.03]
        CPU: [rk3328, rk3399, rk3568]
        SET: [docker, non-docker]
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d
        wget https://raw.githubusercontent.com/friendlyarm/build-env-on-ubuntu-bionic/master/install.sh
        sed -i -e 's/^apt-get -y install openjdk-8-jdk/# apt-get -y install openjdk-8-jdk/g' install.sh
        sed -i -e 's/^\[ -d fa-toolchain \]/# [ -d fa-toolchain ]/g' install.sh
        sed -i -e 's/^cat fa-toolchain/# cat fa-toolchain/g' install.sh
        sudo -E bash ./install.sh
        sudo -E update-alternatives --install $(which python) python /usr/bin/python2.7 20
        sudo -E git config --global user.name 'GitHub Actions'
        sudo -E git config --global user.email 'noreply@github.com'
        git clone https://github.com/friendlyarm/repo
        sudo -E cp repo/repo /usr/bin/
        mkdir -p ./artifact
        sudo swapoff -a
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /usr/local/share/boost /opt/ghc

    - name: Download Source
      run: |
        mkdir project
        cd project
        repo init --depth=1 -u https://github.com/friendlyarm/friendlywrt_manifests -b master-v${{ matrix.VERSION }} \
                -m ${{ matrix.CPU }}.xml --repo-url=https://github.com/friendlyarm/repo  --no-clone-bundle

        repo sync -c kernel --no-clone-bundle
        repo sync -c u-boot --no-clone-bundle
        repo sync -c rkbin --no-clone-bundle
        repo sync -c configs --no-clone-bundle
        repo sync -c device/common --no-clone-bundle
        repo sync -c device/friendlyelec --no-clone-bundle
        repo sync -c scripts --no-clone-bundle
        repo sync -c scripts/sd-fuse  --no-clone-bundle
        repo sync -c toolchain  --no-clone-bundle

    - name: Download friendlywrt rootfs
      if: matrix.SET == 'non-docker'
      uses: robinraju/release-downloader@v1.5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        repository: "lawrencetg/Actions-FriendlyWrt-Test"
        tag: ${{ needs.prepare_release.outputs.release_tag }}
        fileName: "rootfs-friendlywrt-${{ matrix.VERSION }}.tgz"

    - name: Download FriendlyWrt Rootfs (Docker)
      if: matrix.SET == 'docker'
      uses: robinraju/release-downloader@v1.5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        repository: "lawrencetg/Actions-FriendlyWrt-Test"
        tag: ${{ needs.prepare_release.outputs.release_tag }}
        fileName: "rootfs-friendlywrt-${{ matrix.VERSION }}-docker.tgz"

    - name: Prepare config
      id: config
      run: |
        cd project
        case ${{ matrix.CPU }} in
        rk3328)
          MODEL=R2S-R2C-Series
          ;;
        rk3399)
          MODEL=R4S-Series
          ;;
        rk3568)
          MODEL=R5S
          ;;
        *)
          echo "unknow cpu"
          exit 1
          ;;
        esac
        FILENAME=${MODEL}-FriendlyWrt-22.03.img
        DIRNAME=friendlywrt21
        if [ "${{ matrix.VERSION }}" == "22.03" ]; then
          DIRNAME=friendlywrt22
        fi
        CONFIG=rockchip
        if [ "${{ matrix.SET }}" == "docker" ]; then
          CONFIG=rockchip-docker
          DIRNAME=${DIRNAME}-docker
          FILENAME=${MODEL}-FriendlyWrt-22.03-Docker.img
        fi
        cat > .current_config.mk <<EOL
        . device/friendlyelec/${{ matrix.CPU }}/base.mk
        TARGET_IMAGE_DIRNAME=${DIRNAME}
        TARGET_FRIENDLYWRT_CONFIG=${CONFIG}
        TARGET_SD_RAW_FILENAME=${FILENAME}
        EOL
        echo "##[set-output name=img_filename;]$FILENAME"

    - name: Unpack friendlywrt rootfs
      run: |
        cd project
        if [ "${{ matrix.SET }}" == "docker" ]; then
          tar xvzf "../rootfs-friendlywrt-${{ matrix.VERSION }}-docker.tgz"
        else
          tar xvzf "../rootfs-friendlywrt-${{ matrix.VERSION }}.tgz"
        fi

    - name: Compile uboot and kernel
      run: |
        cd project
        # ./build.sh kernel
        # ./build.sh uboot

    - name: Build sd image
      id: build_sd_image
      run: |
        tar cvzf 1.tgz project/.current_config.mk project/device
        cp 1.tgz artifact/${{ steps.config.outputs.img_filename }}
        rm -f 1.tgz

        cd project
        # ./build.sh sd-img
        # mv out/${{ steps.config.outputs.img_filename }} ../artifact/
        cd ../artifact/
        gzip *.img

    # - name: Upload release asset
    #   uses: actions/upload-release-asset@v1.0.2
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ needs.prepare_release.outputs.upload_url }}
    #     asset_path: ./artifact/${{ steps.config.outputs.img_filename }}.gz
    #     asset_name: ${{ steps.config.outputs.img_filename }}.gz
    #     asset_content_type: application/gzip

    - name: Upload image to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./artifact/${{ steps.config.outputs.img_filename }}.gz
        asset_name: ${{ steps.config.outputs.img_filename }}.gz
        tag: ${{ needs.prepare_release.outputs.release_tag }}
        overwrite: true

